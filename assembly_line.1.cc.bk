#include "assembly_line.h"

mutex car[NUM_OF_STAGES];

AssemblyLine::AssemblyLine(unsigned request) {
  this->request = request;
  for (unsigned i = 0; i < NUM_OF_STAGES; i++)
    stage[i] = true;
}

void AssemblyLine::build_bodywork(unsigned i) {
  string s = "Building bodywork of car number: " + std::to_string(i) + '\n';
  cout << s;
  std::this_thread::sleep_for(seconds(2));
}

void AssemblyLine::stage0() {
  unsigned i = 0;
  while (i < request) {
    car[i%NUM_OF_STAGES].lock();
    build_bodywork(i);
    while (!stage[1]);
    car[i%NUM_OF_STAGES].unlock();
    i++;
    stage[0] = true;
  }
}

void AssemblyLine::paint_bodywork(unsigned i) {
  string s = "Painting bodywork of car number: " + std::to_string(i) + '\n';
  cout << s;
  std::this_thread::sleep_for(seconds(2));
}

void AssemblyLine::stage1() {
  unsigned i = 0;
  while (i < request) {
    if (stage[0]) {
      car[i%NUM_OF_STAGES].lock();
      stage[1] = false;
      paint_bodywork(i);
      while (!stage[2]);
      car[i%NUM_OF_STAGES].unlock();
      i++;
      stage[1] = true;
    }
  }
}

void AssemblyLine::install_mechanical_parts(unsigned i) {
  string s = "Installing mechanical parts of car number: " + std::to_string(i) + '\n';
  cout << s;
  std::this_thread::sleep_for(seconds(2));
}

void AssemblyLine::stage2() {
  unsigned i = 0;
  while (i < request) {
    if (stage[0]) {
      car[i%NUM_OF_STAGES].lock();
      stage[2] = false;
      install_mechanical_parts(i);
      while (!stage[3]);
      car[i%NUM_OF_STAGES].unlock();
      i++;
      stage[2] = true;
    }
  }
}

void AssemblyLine::install_electronics(unsigned i) {
  string s = "Installing electronics of car number: " + std::to_string(i) + '\n';
  cout << s;
  std::this_thread::sleep_for(seconds(2));
}

void AssemblyLine::stage3() {
  unsigned i = 0;
  while (i < request) {
    if (stage[0]) {
      car[i%NUM_OF_STAGES].lock();
      stage[3] = false;
      install_electronics(i);
      while (!stage[4]);
      car[i%NUM_OF_STAGES].unlock();
      i++;
      stage[3] = true;
    }
  }
}

void AssemblyLine::decorate(unsigned i) {
  string s = "Decorating car number: " + std::to_string(i) + '\n';
  cout << s;
  std::this_thread::sleep_for(seconds(2));
}

void AssemblyLine::stage4() {
  unsigned i = 0;
  while (i < request) {
    if (stage[0]) {
      car[i%NUM_OF_STAGES].lock();
      stage[4] = false;
      decorate(i);
      car[i%NUM_OF_STAGES].unlock();
      i++;
      stage[4] = true;
    }
  }
}

void AssemblyLine::assemble_pip() {
  auto start = system_clock::now();
  thread s0(stage0, (*this));
  thread s1(stage1, (*this));
  thread s2(stage2, (*this));
  thread s3(stage3, (*this));
  thread s4(stage4, (*this));
  s0.join();
  s1.join();
  s2.join();
  s3.join();
  s4.join();
  auto elapsed = system_clock::now() - start;
  cout << "Concurrent time: " 
       << duration_cast<seconds>(elapsed).count()
       << " s " << endl;
}

void AssemblyLine::assemble_seq() {
  auto start = system_clock::now();
  for (unsigned i = 0; i < request; i++) {
    build_bodywork(i);
    paint_bodywork(i);
    install_mechanical_parts(i);
    install_electronics(i);
    decorate(i);
  }
  auto elapsed = system_clock::now() - start;
  cout << "Sequential time: " 
       << duration_cast<seconds>(elapsed).count()
       << " s " << endl;
}